---
- hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Adjust the path as necessary
  become: yes
  tasks:
    - name: Print Python interpreter path
      debug:
        msg: "{{ ansible_python_interpreter }}"
    
    - name: Install software-properties-common
      apt:
        name: software-properties-common
        state: present

    - name: Add PPA for PHP
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Add PPA for Nginx Mainline
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/nginx-mainline
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist

    - name: Install unattended upgrades
      apt:
        name: unattended-upgrades
        state: present

    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present
      become: true

    - name: Configure unattended upgrades for security updates
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
            "${distro_id}:${distro_codename}";
            "${distro_id}:${distro_codename}-security";
          };
          Unattended-Upgrade::Automatic-Reboot "true";

    - name: Enable automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";

    - name: Allow SSH traffic on all hosts
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Copy SSH authorized keys from ubuntu to new user
      authorized_key:
        user: "{{ new_user }}"
        key: "{{ lookup('file', '/home/ubuntu/.ssh/authorized_keys') }}"
        state: present
        manage_dir: yes


- hosts: mysql
  become: yes
  tasks:
    - name: Install MySQL
      apt:
        name: mysql-server
        state: present

    - name: Ensure PyMySQL is installed
      pip:
        name: PyMySQL
        executable: /usr/bin/pip3  # Make sure this points to the pip executable for Python 3

    - name: Create a new custom user for MySQL service
      user:
        name: "{{ new_user }}"
        system: yes

    - name: Ensure root user uses mysql_native_password
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: root
        host: localhost
        password: "{{ mysql_root_password }}"
        priv: "*.*:ALL,GRANT"
        state: present
        append_privs: yes
        check_implicit_admin: yes
        auth_plugin: mysql_native_password

    - name: Remove anonymous users
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: ''
        host_all: yes
        state: absent

    - name: Remove test database
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: test
        state: absent

    - name: Disallow root login remotely
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: root
        host: '%'
        state: absent

    - name: Allow MySQL traffic
      ufw:
        rule: allow
        port: '3306'
        proto: tcp
    - name: Enable UFW
      ufw:
        state: enabled



- hosts: web
  become: yes
  tasks:
    - name: Create a new custom user for web service
      user:
        name: "{{ new_user }}"
        system: yes

    - name: Ensure custom user home directory exists
      file:
        path: "/home/{{ new_user }}"
        state: directory
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0755'

    - name: Ensure www directory exists
      file:
        path: "/home/{{ new_user }}/www"
        state: directory
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0755'

    - name: Install Nginx and PHP-FPM
      apt:
        name:
          - nginx
          - "php{{ php_version }}-fpm"
          - "php{{ php_version }}-mysql"
        state: present

    - name: Configure Nginx and PHP-FPM with custom user
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify: restart nginx

    - name: Configure PHP-FPM pool
      template:
        src: www.conf.j2
        dest: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
      notify:
        - restart nginx
        - restart php-fpm

    - name: Configure Nginx to use PHP-FPM
      template:
        src: nginx-site.j2
        dest: /etc/nginx/sites-available/default
      notify: restart nginx

    - name: Create index.php file
      template:
        src: index.php.j2
        dest: "/home/{{ new_user }}/www/index.php"
      notify: restart nginx

    - name: Ensure index.php belongs to new user
      file:
        path: "/home/{{ new_user }}/www/index.php"
        state: file
        owner: "{{ new_user }}"
        group: "{{ new_user }}"
        mode: '0644'

    - name: Ensure Nginx starts on boot
      ansible.builtin.systemd:
        name: nginx
        enabled: yes
        state: started

    - name: Ensure PHP-FPM starts on boot
      ansible.builtin.systemd:
        name: "php{{ php_version }}-fpm"
        enabled: yes
        state: started

    - name: Allow HTTP and HTTPS traffic
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '80'
        - '443'
    - name: Enable UFW
      ufw:
        state: enabled

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart php-fpm
      service:
        name: "php{{ php_version }}-fpm"
        state: restarted